generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique @db.VarChar(255)
  password        String           @db.VarChar(255)
  username        String           @unique @db.VarChar(50)
  userType        UserRole
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  address         String           @db.VarChar(255)
  phoneNumber     String           @db.VarChar(15)
  photoUrl        String           @db.VarChar(1024)
  admin           Admin?
  bookings        Booking[]
  notifications   Notification[]
  reviews         Review[]
  serviceProvider ServiceProvider?
}

model ServiceProvider {
  id            Int            @id @default(autoincrement())
  userId        Int            @unique
  email         String         @unique @db.VarChar(255)
  password      String         @db.VarChar(255)
  username      String         @unique @db.VarChar(50)
  certification Bytes?
  identityCard  Bytes?
  photoUrl      String?        @db.VarChar(1024)
  address       String?        @db.VarChar(255)
  phoneNumber   String?        @db.VarChar(15)
  age           Int?
  rating        Decimal?       @default(0.0) @db.Decimal(3, 2)
  isAvailable   Boolean        @default(true)
  bookings      Booking[]
  notifications Notification[]
  reviews       Review[]       @relation("ProviderReviews")
  schedule      Schedule[]
  services      Service[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Service {
  id          Int             @id @default(autoincrement())
  name        String          @db.VarChar(255)
  description String
  price       Decimal         @db.Decimal(10, 2)
  duration    Int
  providerId  Int
  categoryId  Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  isActive    Boolean         @default(true)
  image       String          @default("")
  bookings    Booking[]
  reviews     Review[]
  category    Category        @relation(fields: [categoryId], references: [id])
  provider    ServiceProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model Booking {
  id          Int             @id @default(autoincrement())
  userId      Int
  serviceId   Int
  providerId  Int
  bookingDate DateTime
  status      BookingStatus   @default(PENDING)
  notes       String?
  totalPrice  Decimal         @db.Decimal(10, 2)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  provider    ServiceProvider @relation(fields: [providerId], references: [id])
  service     Service         @relation(fields: [serviceId], references: [id])
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments    Payment[]
}

model Review {
  id         Int             @id @default(autoincrement())
  serviceId  Int
  userId     Int
  providerId Int
  rating     Int
  comment    String?
  createdAt  DateTime        @default(now())
  provider   ServiceProvider @relation("ProviderReviews", fields: [providerId], references: [id], onDelete: Cascade)
  service    Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(50)
  description String?
  services    Service[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Schedule {
  id          Int             @id @default(autoincrement())
  providerId  Int
  dayOfWeek   Int
  startTime   DateTime
  endTime     DateTime
  isAvailable Boolean         @default(true)
  provider    ServiceProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model Payment {
  id            Int           @id @default(autoincrement())
  bookingId     Int
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod
  transactionId String?       @db.VarChar(255)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  booking       Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Notification {
  id         Int              @id @default(autoincrement())
  userId     Int
  providerId Int?
  title      String           @db.VarChar(255)
  message    String
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())
  provider   ServiceProvider? @relation(fields: [providerId], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  CUSTOMER
  PROVIDER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  REJECTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  ONLINE
  CASH
}
